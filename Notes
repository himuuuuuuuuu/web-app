1.Download and Install Node JS on Your PC
-Node JS is used to create web apps, servers, scripting Tools etc.
https://nodejs.org/en
-Node JS Provides a Package Manager called NPM [Node Package Manager]
-Package Manager is tool used by developed to install , Upgrade and uninstall any libaray required for project.
Yarn
Browser
NuGet
Ruby Gems
Composer
NPM

-Open command prompt on Your PC and test
C:\> node -v
C:\> npm -v

Note: Make sure that you have the latest version of Node 20x & Npm 10x

2.Download Visual Studio Code Editor

https://code.visualstudio.com/


3.Download extensions of VS Code
a- Live Server
b - vscode-icons
c- intellisense for CSS class names in HTML.
d- ESLint

React in existing web application
1. Create a new folder for web application
E:\web-app
2.Open folder in VS Code and setup environment for web appliction

-Open Terminal and run the command
> npm init -y  //generates "package.json"

-Add a new file into project by name
"README.md"

-Add folders

a- public : It used to keep static resources : HTML, images,videos
b- src: It used for dynamic resources : CSS, SCSS, JS, TS..

-Add "index.html" in public folder
-Add "home.html" in public folder

3. Setup React library for "home.html"
-Inorder to use React in any page You need 3 libraries.
1. react.js :core libarary for react
2. react-dom.js :libaray for virtual DOM
3. babel.js : complier for react

-You need all these libraries and approach for react up to version "17X".

-You can get the libaries from CDN or download using package manager.

-CDN is available for React from legacy repository.

https://legacy.reactjs.org/docs/cdn-links.html

Babel CDN Link: copy babel standalone library

https://babeljs.io/docs/babel-standalone

# <div id="root"></div> 

created virtual DOM <component> after this component is created is root.
render means generating output.

#ReactDOM.render("Welcome to React", document.getElementById("root"));
react cannot use javasctript directly
react uses JSX as language

-create an element for actual  DOM
 <div id="root"> </div>

 -create virtual DOM render into actual DOM by using the method ReactDOM.render()

 Syntax:
 ReactDOM.render("component" , target_on_actual_DOM)
 React uses JSX[JavaScript Extension] as language.Hence the type of script must be "JSX or Babel"

 Syntax:
 <script type="text/babel"> </script>
 <script type="text/jsx"> </script>

#install React & Babel libary for project:
1.Open Terminal in your project.

2.Install libaries by using following commands
npm install react --save
npm install react-dom --save
npm install @babel/standlone --save

3.All libary files are copied into "node_modules"  and project is using a module system called "UMD" [Universal Module Distribution]. There are various other module systems like:
a-Common Js
b-Require JS
c-AMD
d-ESModule

4.Link the following file to your HTML page [home.html]
<script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/ react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
   
EX:
home.html

#React Components:-
properties-
-Components are considered as building blocks for SPA [Single Page Application]
-Components is like a template with 3 basic elements.
a-Design
b-Styles
c-Logic[Functionality]

-Design is created using HTML
-Styles are defind with CSS
-Logic is configure with javascript or Typescript[JSX,TSX]
-Components in React are created by using
a-javascript Functions
b-javascript classes

Notes:-Classes are still supported in React, but not recommended for new Code.

JavaScript functions:
.Function Declartion
.Function Expression
.Function Signature
.Function Parameters
.Rest Parameters
.Spread Operator in Functions
.Formal Parameters
.Actual Parameters
.Function Closure
.Anonymous Function
.Function Generator
.Function Call Back
.Function Promises
.Async Functions
.Arrow Functions
.Function Recursion

Rules for creating a component with JS function
-Component function name must start with upper case letter.
    function Login()
    {

    }

    function login(){} => invalid

-Component function must return JSX element.
-it can't be void type.
-JSX is returned by using anonymous function.
SYNTAX:
    function Login()
    {
        return (
            <markup> </markup>  //JSX
        );
    }

JSX Rules:
-JSX can't render multiple containers.
-Make sure that JSX is rendering only one container into virtual DOM.
(
    <h2></h2> => invalid
    <p> </p>
)

(
    <div>
    <h2></h2> => valid
    <p> </p>
     </div>
)

-JSX can't have void element syntax.
-IN JSX every element must have end token.

<input type="text"> </input>
<input type="text"/>

<img> </img>
</img>
<br> </br>


-JSX element can't use attributes, it requires only properties.

Syntax:
    <div class="container">  //Invalid

    <div className="container"> //valid

Note:You can define a JSX fragment using various techniques.

a- you can use HTML containers

<div> <header> <section> <main> <nav> etc ....

b- you can use Empty Fragment
<>
</>

c- you can also use React.Fragment
<React.Fragment>

</React.Fragment>

























